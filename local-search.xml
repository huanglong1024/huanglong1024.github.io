<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【浅谈】工程素养</title>
    <link href="/2024/01/12/engineering-literacy/"/>
    <url>/2024/01/12/engineering-literacy/</url>
    
    <content type="html"><![CDATA[<h1 id="【浅谈】工程素养"><a href="#【浅谈】工程素养" class="headerlink" title="【浅谈】工程素养"></a>【浅谈】工程素养</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我是学软件工程专业的，大学那会，软件工程是我们的必修课，有3个学分。教那门课的老师经常提醒我们，作为软件工程专业的学生，你们得有工程能力。造一架飞机是一个工程，挖一条隧道是一个工程，做一个软件也是一个工程，得有工程师的思维，得有全局意识。</p><p>老实说，这些话，我到现在也是一知半解。</p><p>写这篇文章仅仅是对自己目前的所学的一个小的总结，仅仅从个人的角度，聊聊一个软件工程师，特别是后端软件工程师，需要具备咋样的工程素养。也是自己对相关知识体系的一个简单梳理，用于后面自查。</p><p><img src="/../img/%E5%B7%A5%E7%A8%8B%E7%B4%A0%E5%85%BB.png"></p><h2 id="如何快速的了解一个新技术-领域"><a href="#如何快速的了解一个新技术-领域" class="headerlink" title="如何快速的了解一个新技术/领域"></a>如何快速的了解一个新技术/领域</h2><p>作为一个软件工程师，时刻都面临着新的技术，新的领域。做新的需求，需要用到不曾学过的技术，换了公司，业务方向有了大的改变。如何快速的了解一个新的技术/领域，是我们经常面对的难题。</p><p>个人而言，我将这个过程分为三块。</p><p><img src="/../img/enter_new_territory.png"></p><p>Research 即学习资料的获取，好的肥料才能开出花来。</p><ul><li><p>github</p></li><li><p>google</p></li><li><p>官方文档</p></li><li><p>经典书籍</p></li><li><p>极客时间</p></li><li><p>推特</p></li></ul><p>Learning 即学习的过程和总结</p><ul><li>了解该技术的历史和发展</li><li>形成知识体系</li><li>多学多记录总结</li></ul><p>最后是 Practice. 实践才是检验真理的唯一标准。</p><ul><li>对于技术领域，最好亲手实践一下，印象才会深刻。</li></ul><h2 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h2><p>基础知识是作为一个程序员的内功。基座得搭好，上层建筑才稳当。这些知识自己也都还在不断学习之中，简短称述一下以自勉。</p><ul><li>操作系统与计算机组成原理</li><li>计算机网络</li><li>数据结构与算法</li><li>编程语言</li><li>软件架构+数据库+中间件+领域知识</li><li>实践能力+工具链使用</li></ul><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="项目结构规范"><a href="#项目结构规范" class="headerlink" title="项目结构规范"></a>项目结构规范</h3><p>搭建项目软件开发的第一步，如何划分是个细致活。对于 java 而言，看过的很多项目结构都大差不差，对于 go lang 而言，就有不少分歧。举个简单的例子，比如 golang 的项目中，不少开源的论坛和文章中倡导去掉 dto 层，利用 golang struct 中的 tag 来做扩展，来定义 dto 的返回对象字段(reference: <a href="https://dsysd-dev.medium.com/stop-using-dtos-in-go-its-not-java-96ef4794481a">Stop Using DTOs in Go, It’s Not Java</a>)。golang is not java！(😂)</p><p>这里简单陈列下网上 java 和 golang 的项目结构（仅做参考）</p><ul><li><a href="https://segmentfault.com/a/1190000022110134">java项目结构</a></li><li><a href="https://makeoptim.com/golang/standards/project-layout/">golang 编程规范 - 项目目录结构</a></li></ul><h3 id="编程语言规范"><a href="#编程语言规范" class="headerlink" title="编程语言规范"></a>编程语言规范</h3><p>一些开源的代码规范。</p><ul><li>java <ul><li>Google java 风格指南：<a href="https://google.github.io/styleguide/">https://google.github.io/styleguide/</a></li><li>阿里巴巴java开发手册：<a href="https://github.com/mysterin/alibaba-java-specification/blob/master/alibaba-java-specification.md">https://github.com/mysterin/alibaba-java-specification/blob/master/alibaba-java-specification.md</a></li><li>腾讯 java 安全指南：<a href="https://github.com/Tencent/secguide/blob/main/Java%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md">https://github.com/Tencent/secguide/blob/main/Java%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md</a></li></ul></li><li>golang<ul><li>Google golang 风格指南：<a href="https://google.github.io/styleguide/">https://google.github.io/styleguide/</a></li><li>Uber golang 风格指南：<a href="https://github.com/uber-go/guide?tab=readme-ov-file">https://github.com/uber-go/guide?tab=readme-ov-file</a></li><li>腾讯 go 代码规范：<a href="https://www.cnblogs.com/xuweiqiang/p/15337132.html">https://www.cnblogs.com/xuweiqiang/p/15337132.html</a></li><li>腾讯 golang 安全指南：<a href="https://github.com/Tencent/secguide/blob/main/Go%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md">https://github.com/Tencent/secguide/blob/main/Go%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md</a></li></ul></li></ul><h3 id="Git-规范"><a href="#Git-规范" class="headerlink" title="Git 规范"></a>Git 规范</h3><p>好的代码提交规范是项目的生命线。</p><p>【git 分支与代码提交规范】</p><ul><li>小批量代码提交，每次代码提交时尽可能&lt;=400行</li></ul><p>【git commit log 规范】</p><p>通用Commit Message 格式如下。</p><p>目前规范使用较多的是 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular 团队的规范 </a>, 继而衍生了 <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits specification</a>. 很多工具也是基于此规范, 它的 message 格式如下:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;type&gt;</span>(<span class="hljs-params">&lt;scope&gt;</span>): <span class="hljs-params">&lt;subject&gt;</span><br><span class="hljs-comment">// 空一行</span><br><span class="hljs-params">&lt;body&gt;</span><br><span class="hljs-comment">// 空一行</span><br><span class="hljs-params">&lt;footer&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>备注：</p><p>git commit 提交时需要换行时，请使用Bash命令行的Git，你可以执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">git commit -m <span class="hljs-string">&quot;this is</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">&gt; a line</span></span> <br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">&gt; with new lines</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">&gt; maybe&quot;</span></span><br></code></pre></td></tr></table></figure><ul><li>-m 后面使用双引号</li><li>换行时，直接按回车enter键</li><li>log输入完后，输入“ ，再回车就可以commit成功了</li></ul></blockquote><p><strong>简单汇总：</strong></p><img src="/../img/git_specification.png" alt="image-20220922183347992" style="zoom:67%;"><p>Reference:</p><ul><li><a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines">Angular git 提交信息规范</a></li><li><a href="https://zjdoc-gitguide.readthedocs.io/zh-cn/latest/index.html">开源文档 GitGuide</a></li></ul><h3 id="CodeReview"><a href="#CodeReview" class="headerlink" title="CodeReview"></a>CodeReview</h3><blockquote><p>当我在CR的时候，我在CR什么？</p></blockquote><p>硅谷的知名互联网公司，都搞merge request/push request合入mainline之前的code review。Google为了保证review质量，还搞了Readability认证。网上有很多<a href="https://www.pullrequest.com/blog/google-code-review-readability-certification/">资料、报道</a>有讲解到。Google在<a href="https://google.github.io/eng-practices/review/reviewer/looking-for.html">公开网站</a>上也有说到。</p><p>Code Review 的大方向</p><p><img src="/../img/code_review_specification.png" alt="code review"></p><p>Reference:</p><ul><li><p><a href="https://google.github.io/eng-practices">Google Engineering Practices Documentation</a></p></li><li><p><a href="https://lib.jimmysong.io/eng-practices/">谷歌工程实践 宋净超中文翻译版</a></p></li></ul><h3 id="代码坏味道"><a href="#代码坏味道" class="headerlink" title="代码坏味道"></a>代码坏味道</h3><p>写一份好的代码，拒绝坏味道。</p><p>Reference:</p><ul><li><a href="https://book-refactoring2.ifmicro.com/docs/ch3.html">重构-代码坏味道</a></li><li><a href="https://juejin.cn/post/6962812178537644063">25种代码坏味道总结+优化示例</a></li></ul><h3 id="主干开发？大仓小仓之争？开发流程理念的理解"><a href="#主干开发？大仓小仓之争？开发流程理念的理解" class="headerlink" title="主干开发？大仓小仓之争？开发流程理念的理解"></a>主干开发？大仓小仓之争？开发流程理念的理解</h3><p>在我人生第一家公司那里，我第一次了解到了大仓的概念。依稀记得当时公司内有很多大仓小仓的讨论，是屠龙术还是前朝宝剑斩今朝的官，大家各说纷云。不管用哪种，都了解一下其中的利弊，也挺好的。</p><p>Reference:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/28524745">为什么Google上十亿行代码都放在同一个仓库里?</a></li><li><a href="https://cloud.tencent.com/developer/article/1881386">从微信后端仓库发展史谈谈单仓和多仓</a></li><li><a href="https://36kr.com/p/1218375440667012">Google 和腾讯为什么都采用主干开发模式？</a></li><li><a href="https://juejin.cn/post/6967981728619544606">特性分支开发模式 or 主干开发模式，团队该如何选择？</a></li><li><a href="https://codec.wang/blog/mono-repo-in-js">大仓实践录：Lerna/NPM/Yarn Workspace 方案组合和性能对比</a></li><li><a href="https://my.oschina.net/u/5783135/blog/10750685">前端 monorepo 大仓权限设计的思考与实现</a></li></ul><h2 id="项目管理能力"><a href="#项目管理能力" class="headerlink" title="项目管理能力"></a>项目管理能力</h2><p>不要只是低头写代码，有时候，也得抬头看看上下游，看看这艘船到哪了。</p><ul><li>需求分析要透彻</li><li>协调上下流的沟通能力</li><li>能合理规划开发流程和进度</li><li>及时暴露问题</li></ul><p>Reference:</p><ul><li><a href="https://github.com/zhengda/The-Mythical-Man-Month-zh/blob/main/docs/README.md">人月神话</a></li></ul><h2 id="文档撰写能力"><a href="#文档撰写能力" class="headerlink" title="文档撰写能力"></a>文档撰写能力</h2><blockquote><p>绝大部分的程序员都讨厌写文档，但又讨厌别人不写文档。</p></blockquote><p>个人的理解上，我们需要掌握以下文档的编写：</p><ul><li>需求分析文档：一般产品会写需求文档PRD，但是作为程序员，我们也应该具备撰写需求分析文档的能力。</li><li>架构设计文档：对项目的整体架构设计</li><li>技术设计文档：仅需要概要设计文档，详细设计就是代码本身</li><li>API参考文档（reference doc）一般由代码直接生成。它的量是最大的，变更最频繁的</li><li>SDK或者框架使用文档/教程：自己封装的SDK、框架等，写个详细的教程传递出去，让更多人用</li><li>技术分享文档：个人的技术输出，当然了，很多时候也用 PPT，我更喜欢用文档。</li><li>Readme文档：每个项目的介绍文档，这个还挺重要的，一份好的 readme 就是一个项目最好的”个人简历”</li><li>新人文档：帮助团队新同学快速了解团队工作内容，快速融入。我个人认为这个很重要，一份好的新人文档也相当于对自己团队的工作内容总结和工作要求说明。</li></ul><p>Reference:</p><ul><li><a href="https://github.com/google/styleguide/blob/gh-pages/docguide/README.md">Google documentation guide</a></li><li><a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范 阮一峰</a> </li></ul><h2 id="测试能力"><a href="#测试能力" class="headerlink" title="测试能力"></a>测试能力</h2><p>作为一个有责任心的程序员，从来不是写完代码就完事了。我们得保证代码的质量，除了依靠测试同学的努力，自身也得投入部分精力。据我所知，现在很多大厂都会要求编程人员写单测，搞测试左移，这也被称之为 TDD，即测试驱动开发。这种做法是否有效，有多大效果我这里不想高谈阔论。但是我个人觉得，自己写的代码，自测的质量是一定要保证的。</p><h2 id="软件维护能力"><a href="#软件维护能力" class="headerlink" title="软件维护能力"></a>软件维护能力</h2><p><img src="/../img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="软件工程生命周期"></p><p>​                                     软件生命周期</p><p>从软件工程的角度来说，软件的维护占据了其生命周期的绝大部分。如果维护软件的正常运行，又如何度量软件的运行质量呢？这里我简单说两个我个人比较关心的点——SLA 和 Troubleshooting。</p><h3 id="SLA"><a href="#SLA" class="headerlink" title="SLA"></a>SLA</h3><p>一般软件服务都会有 SLA 的保证，特别是对中台类型的服务。SLA 是服务质量的重要衡量指标。其主要的衡量纬度如下：</p><ul><li><p>服务可用性</p></li><li><p>错误率</p></li><li><p>安全性</p></li><li><p>响应时间</p></li><li><p>业务成果</p></li><li><p>首次呼叫解决率</p></li><li><p>放弃率</p></li></ul><p>Reference:</p><ul><li><a href="https://aws.amazon.com/cn/what-is/service-level-agreement/">什么是服务等级协议（SLA）</a></li></ul><h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>Troubleshooting = trouble(问题/故障) + shooter(射手/枪手)</p><blockquote><p>简而言之：用 shooter 将 trouble maker 解决掉</p></blockquote><p><img src="/../img/troubleshooting%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浅谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年终总结--探索更大的世界和生活</title>
    <link href="/2024/01/01/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2024/01/01/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2023年终总结–探索更大的世界和生活"><a href="#2023年终总结–探索更大的世界和生活" class="headerlink" title="2023年终总结–探索更大的世界和生活"></a>2023年终总结–探索更大的世界和生活</h1><p>在提笔写之前，我又重新去翻看了我去年的年终总结。那时候的我，刚换了一份新的工作，来到了新的城市，幻想着新的生活。我在文中的最后自问：“2023 年呢？有什么规划吗？想去做什么？” 那时候的我没有答案。直到今天，我想我可以去回答这个问题了。</p><p>探索更大的世界和生活，这是我 2023 年交出的答卷。</p><p>还是先简单聊聊工作吧。今年在 TrendMicro 度过了完整的一年，主要的工作还是项目的各种开发事宜。年初的时候帮助团队调研 open telemetry 的技术方案，在 Azure 环境上搭建好了一个基本可实施的线上环境，用我们目前在跑的 web 后台服务进行了一个简单的集成，并在团队中进行了相关技术分享。但是最终这个方案还是没有被采纳。一方面我们目前的服务量级并没有那么大，这个阶段做这种集成收益并不那么显著。另一方面，我们了解到公司内部 SRE 团队也在搭建公司级别的 open telemetry 平台，我们可以等他们实践完再做权衡，或者等他们平台稳定了，考虑接入他们的平台，对我们来说，更为方便，毕竟不需要多花人力来维护平台，成本上是更为划算的。不过相关的 research 和分享也让我自己和团队的同事对这方面的技术有了更为深入的了解，也减少了我们后续接入公司相关平台的认知学习时间。年中的时候，作为核心开发参与了团队新项目的整体架构设计和核心代码研发。根据业务的服务边界设计了整体的微服务架构，并调研了 GRPC 框架，帮助团队设计和实施了GRPC 服务 IDL 文件管理的方案，即采用镜像仓库 + api 大仓(通过结构来划分领域) + semantic version. 同时，因为该项目需求的缘故，对市场上的 golang 的规则引擎和 SQL builder 方案进行了一次 research, 研究了不少开源库，比如 gendry, govaluate 等等，甚有收获。同时这个研发过程中，自己对于 Azure 上的相关组件（如service bus，adx）的使用也更为了解。十月份的时候，又开始了另一个新项目的 research 工作 ，做了大量的业务和技术方案调研，目前该项目的 POC 工作基本完成，总体的服务架构设计也基本就绪，处于技术研发的阶段中，估计得明年 Q1 才能 release 了。</p><p>学习上，今年看了不少的书。根据微信读书的统计，本年度总共看了 130 个小时，读完了15 本书籍，书籍分类上，看的最多的还是计算机相关的。除了微信读书，我另一个偏好就是看一些开源社区的文章和一些官方的技术文档，并且逐渐开始尝试看一些英文的资料，比如 HackerNews，Medium 这样的站点，个人体验上，有些英文的技术文章确实写的很好，深度和广度都很不错的，不过想系统的学习某一类知识，还是看书和官方的技术文档更成体系。这里简单分享一些我今年看过并且觉得还不错的书。</p><ul><li>《万历十五年》</li><li>《冬牧场》</li><li>《智慧的疆界》</li><li>《硅谷之火》</li><li>《Unix 传奇》</li><li>《大规模分布式存储系统》</li><li>《网络是怎样链接的》</li><li>《k8s 权威指南》</li><li>《当我谈跑步时，我谈些什么》</li></ul><p>另外，我从去年开始听小宇宙的播客，老实话，这给我打开了一扇窗，让我看到了更广阔的世界。根据小宇宙的统计，我去年一共听了八百多个小时的时长，算得上是小宇宙的高强度使用人群了。我习惯于听一些技术博客，比如开源面对面，RustTalk ，从零道一，还有 ggtalk 等等。里面讨论了很多程序员职业发展相关的话题，当然也有一些生活上的闲谈。正所谓以人为鉴，可明得失。听这些计算机界的前辈们聊聊技术，谈谈人生，也是一件趣事。另外基本无害和随机游走也是我钟爱的节目，遗憾的是老徐的随机游走今年还没有更新节目，似乎放弃维护了？这倒是让我想起了我非常喜欢的一个开源博主，面向信仰编程，他也不再更新的新的文章了，我在推特上关注了他，了解到他离开了 Shopee ，似乎去了创业公司。写博客和做播客都是兴趣，每个人都有自己的生活，兴趣终有一天会消散，但是留下的足迹却让他人受益匪浅。这是我理解的开源的意义。</p><p>除此之外，本年度我最想完成的一个学习项是学好英语。但很遗憾，我没能很好的完成任务。我能很长时间投入去写一段代码，去看一本书，去排查一个 bug ，但是我很难花一个小时全身心的投入去背单词，或者练习口语。感觉还是意志力的问题吧，我的意志力还是太差了。不过三天打鱼 两天晒网，终归是比没打鱼的强。自我感觉现在的英语水平相较于 2023 年年初还是有不少进步的，阅读大部分的英文技术文档都能大概看懂，只是口语上还是欠缺很多。希望 2024 年，英语水平能再进一步。</p><p>聊完了工作与学习，再聊聊生活。</p><p>骑行上，今年骑行了江心洲，将军山，中山陵，以及记不清的南京的大街小巷。也买了不少的装备，比如夜间的尾灯，头盔，骑行服等，看着还真有模有样的。不过大都时候还是啥都不带，拎着车就直接开骑了，简单干脆。另外，因为组内同事的邀请，也报名参加了公司的吉他培训班。买了一把入门的雅马哈 F310，跟着老师每两周上一次课。我比较懒，每次都要到上课前一天晚上疯狂练习，像是回到了开学前狂补作业的学生时代。不过马马虎虎的练习倒也有些收获，现在也能大差不差的跟着五线谱弹上那么一小段，当然，只能弹入门的小曲，大横按和快速的大调切换还是手忙脚乱。此外，今年也看了不少的电影，剧集和动漫。这些是闲适的放松时刻。其中很多已经记不清了，有些记忆深刻的，在此简单做个记录。</p><ul><li>老友记第一季到第十季</li><li>蒙古草原，天气晴</li><li>铃芽之旅</li><li>迷失东京</li><li>西部世界</li></ul><p>最后，聊聊旅行。我非常喜欢 b 站上的一位 up 主，Linksphotograph。他喜欢爬山，摄影，探索世界。我也因为他的影响，买入了人生的第一台相机。如果你拍的不够好，那是因为你离的还不够近。所以我也学着 Links ，踏出了脚步，去感受路。</p><p>今年去过很多地方，五月份去了上海，感受了外滩的繁华，武康路的民国小巷，参观了世博馆，并赶上了正在举办的梵高展览，踏入了梵高的世界。六月份去了一趟庐山，山上的牯岭小镇真的很漂亮，东线和西线景色各异，山风清凉。还废了老大劲去看了三叠泉瀑布，可惜水流不大，但是那三千多个台阶至今回想起来还是后怕。另外，五老峰的云海和庐山的日出也是别样的美景。八月份的时候，去了一趟杭州，晚上围着西湖，走了好几个小时。路过断桥，桥上挤满了人，人头攒动。不过离开断桥后，人流就少了不少，晚上西湖的风吹的很舒服，走了几个小时也不觉得累。十二月初，去日本待了十来天，体验了异国的风土人情。去过福冈，熊本，阿苏火山，别府，汤布院，京都，奈良还有大阪。我非常喜欢熊本和京都，可能是喜欢动漫吧，熊本和京都会有一种让我走进动漫世界的感觉。阿苏火山是从山底徒步上去的，登山的风景很是开阔，冷风很大，行走之间，像是漫步在旷野。另外，去过的这些城市都有很多的神社，印象最深的是京都的八坂神社，夜间的灯笼泛着白光，很是纯净。如果有机会的，还想再去一次，毕竟，还没去过东京，也还没见到过富士山。我想，也一定还会有机会的。</p><p>好了，洋洋洒洒写了一大堆，也到了该收尾的时候了。我不想重复去年的话术，说自己不知道想干什么，只想正确的浪费时间。我知道我想干什么，我想攀更高的峰，走更多的路，看更多的书，我还想在技术领域上能有更长足的进步，如果能有幸能参与一两个开源项目那就更好了。这就是我2024年的规划。</p><p>就写这么多了，明年见朋友们。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【月报】2023-05-去魔都玩</title>
    <link href="/2023/06/07/2023-05/"/>
    <url>/2023/06/07/2023-05/</url>
    
    <content type="html"><![CDATA[<h1 id="【月报】2023-05-去魔都玩"><a href="#【月报】2023-05-去魔都玩" class="headerlink" title="【月报】2023-05 去魔都玩"></a>【月报】2023-05 去魔都玩</h1><p><img src="/../img/shanghai.jpg" alt="外滩"></p><blockquote><p>2023.05.13 拍摄于上海外滩</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>月报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【月报】2023-04-湘北军团</title>
    <link href="/2023/05/07/2023-04/"/>
    <url>/2023/05/07/2023-04/</url>
    
    <content type="html"><![CDATA[<h1 id="【月报】2023-04-湘北军团"><a href="#【月报】2023-04-湘北军团" class="headerlink" title="【月报】2023-04 湘北军团"></a>【月报】2023-04 湘北军团</h1><p><img src="/../img/xiangbeijuntuan.jpg" alt="湘北军团"></p><blockquote><p>久违了，湘北军团。迟到了二十多年的全国大赛终究没有缺席。</p></blockquote><h2 id="工作与学习"><a href="#工作与学习" class="headerlink" title="工作与学习"></a>工作与学习</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>因为工作的需求，这个月花了较多的时间投入到 GRPC 框架的学习和使用上。包括 GRPC 项目结构的搭建，跨 GRPC 服务中 context 的传递，GRPC interceptor 的使用，接口测试， 以及关于 protobuf 文件的管理。因为之前有 RPC 框架使用经验，所以上手还算是比较快的。</p><p>但是关于 GRPC IDL 文件的管理还是花了不少心思去研究了一下。之前在腾讯的时候，有一个独立的平台来对 protobuf 文件进行管理，可以直接在平台上进行 protobuf 文件的定义和修改，并且平台会帮你生成桩代码，且提供版本管理的功能。因为目前所在公司并没有提供这个的平台，所以 protobuf 文件的管理需要另寻它法。经过调研，大体上有三种方法。</p><p>第一种：存放在代码仓库，直接将项目所依赖到的所有 Proto 文件都存放在 <code>proto/</code> 目录下，不经过开发工具的自动拉取和发布。但是这种一份 proto 文件需要多处维护，容易造成不一致。并且每次都需要程序员手动去介入 复制粘贴。基本都是不采纳的。只建议自己学习练习的时候可以这样使用。</p><p>第二种：独立仓库，即用一个独立的仓库来管理所有的 protobuf 文件。提前提供好生成桩代码的脚本文件，将生成的桩代码作为 sdk 引入使用。</p><p>第三种：镜像仓库，也是用一个独立的仓库来管理所有的 protobuf 文件。通过 ci 生成桩代码，并将桩代码同步到镜像仓库中(可以是一个 api 大仓，或者是多个子项目的小仓)。主要目的是将 protobuf 文件和桩代码文件分开管理。</p><p>同时对于第二种和第三种方法，在使用上，也有不同选择。用户可以选择用 submodule 的方法，也可以使用  se mantic version。</p><p>基于一些对比思考，我最终采用了镜像仓库 + api 大仓(通过结构来划分领域) + semantic version.</p><p>理由如下：镜像仓库将 protobuf 文件和桩代码分开管理，满足接口定义与实现划分的抽象理念，后续如果有其他语言的服务，方便扩展(修改 ci 即可)。根据 <a href="https://github.com/googleapis/googleapis">googleapis</a> 的设计，以及我们服务的规模(体量小，微服务划分不算太多)，我们倾向于对于 protobuf 的统一管理，即 api 大仓。同时采用 semantic version 来进行版本管理, 没有选择 submodule 的方式主要是因为 semantic version 这种方式更容易理解和使用，submodule 更多是用在 go 语言项目中，并且基于分支的使用方式不利于后续的管理，且在出现错误的时候，需要回滚代码。</p><p>Reference：</p><ul><li><p><a href="https://grpc.io/">GRPC 官方文档</a></p></li><li><p><a href="https://github.com/golang-standards/project-layout">Standard Go Project Layout</a></p></li><li><p><a href="https://laiye.com/news/post/2585.html">来也科技 Protobuf 最佳工程实践</a></p></li><li><p><a href="https://yuyy.info/?p=1980">Gitlab CI/CD 实践六：统一管理 protocol buffer，API 大仓设计与实现</a></p></li><li><p><a href="https://github.com/googleapis/googleapis">googleapis</a></p></li></ul><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><p>最近开始了早晨背英语。因为我个人习惯早上醒来后会赖床再躺一会，想着躺着刷手机不如拿来背单词。这样把之前规划的晚上背单词的计划提前到早上，似乎更好一些，一来早上精力更足，很多时候，一天的工作足以消耗你绝大部分的精力，晚上背单词的时候特别容易无精打采，效果不佳。二来减少了一些早上无意义的刷手机的行为，同时让自己更快的进入到良好的状态(刷手机真的很消耗工作的精力)。贵在坚持，希望自己的英语能力能够猪突猛进！</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ul><li>《kuberetes 权威指南》时常翻翻</li><li>发现并看了较多的开源博客。主要是关于大数据方面的博客。(发现自己对于数据平台仍旧抱有热情)</li><li>开始学习<a href="https://www.bilibili.com/video/BV1Cm4y1d7Ur/?spm_id_from=333.999.0.0&vd_source=af5b17760a20bb0e435ef05c825f2f19">B站南京大学 jyy 的操作系统课程</a> ，操作系统知识永远是程序员的立身之本。</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="无法离地的飞行"><a href="#无法离地的飞行" class="headerlink" title="无法离地的飞行"></a>无法离地的飞行</h3><p>这个月开始比较频繁的开始骑单车上下班了，感觉大概有三分之二左右的时间是骑单车上下班的吧。骑车的感觉很不错，特别是在晚风吹拂的时候。我很喜欢电影《四海》的主题曲《无法离地的飞行》，骑单车会给我那种感觉。</p><h3 id="蒙古草原，天气晴"><a href="#蒙古草原，天气晴" class="headerlink" title="蒙古草原，天气晴"></a>蒙古草原，天气晴</h3><p>B站播放链接：<a href="https://www.bilibili.com/video/BV12P4y1p7FG/?spm_id_from=333.999.0.0&vd_source=af5b17760a20bb0e435ef05c825f2f19">蒙古草原，天气晴（2006）</a></p><blockquote><p>关野：</p><p>​        你好吗？我们一家都很好。你平安回家了吗？</p><p>​        我们这里已经入冬了，最近在渐渐地变冷，你的茶色斑点白马也非常精神地度过了寒冬。我们还是打算去找那些被偷走的马。</p><p>​        普洁今年进了学校，她经常提起你哦。</p><p>​        值此辞旧迎新之际，祝你的家人、朋友以及你本人身体健康。</p><p>​        再见，在再次见面之前。</p><p>​                                                                                                                                 普洁的母亲，艾鲁蒂内琪美古</p></blockquote><p>我为普洁和她的母亲感到深深的难过。希望他们在另一个世界可以幸福。</p><h2 id="推荐播客"><a href="#推荐播客" class="headerlink" title="推荐播客"></a>推荐播客</h2><p>【枫言枫语&amp;梁杰】<a href="https://www.xiaoyuzhoufm.com/episode/61c0dc5c874a732463bf77df">在加拿大工作和生活是什么体验</a></p><p>这个月听的较多的是 <a href="https://talk.swift.gg/">ggtalk 程序员的闲聊节目</a>, 在家里无事的时候，听着梁杰讲他在加拿大的生活也挺有意思的。</p><p>下月见～</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>月报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【月报】2023-03-大教堂与集市</title>
    <link href="/2023/03/31/2023-03/"/>
    <url>/2023/03/31/2023-03/</url>
    
    <content type="html"><![CDATA[<h1 id="【月报】2023-03-大教堂与集市"><a href="#【月报】2023-03-大教堂与集市" class="headerlink" title="【月报】2023-03 大教堂与集市"></a>【月报】2023-03 大教堂与集市</h1><p><img src="/../img/cathedral_and_market.png" alt="cathedral and market"></p><blockquote><p>这个月拜读了大教堂与集市。开源运动是黑客文化的终极浪漫～</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>故人西辞黄鹤楼，烟花下月下扬州。李白的千古绝唱平添了扬州这座古城的无限风韵。在我的新年旅行计划中，扬州是里面必不可少的一站，然而我却食言了。事情的缘由是我身份证又又又遗失了，缺少了身份证，出行和住旅都不是很方便，三月出南京旅游的计划也不得不暂时搁置。明天就是四月了，那就四月份再去扬州吧～</p><h2 id="工作与学习"><a href="#工作与学习" class="headerlink" title="工作与学习"></a>工作与学习</h2><ul><li><p>之前一直在做的关于 openTelemetry 的 research 的有了第一阶段的进展。搭建好了生产标准的环境，同时利用团队里面的一个 python 项目作为示例，在团队内部做了一次关于云原生下可观测性的分享。因为被安排了其他方面的任务，这个事项暂时被 pendding，后续再跟进。</p></li><li><p>其二，因为项目需求的缘故，对市场上的 golang 的规则引擎和 sql builder 方案进行了一次 research, 研究了不少开源库，比如 gendry, govaluate 等等，甚有收获。</p></li><li><p>持续对计算机基础和相关技术栈进行学习和巩固</p><ul><li>《网络是怎样连接的》 done</li><li>《linux 内核设计的艺术》 in process</li><li>《kubernetes 权威指南》in process</li></ul></li><li><p>科技读物</p><ul><li>《大教堂与集市》done</li><li>《与开源同行，揭秘PingCAP七年创业实践》done</li></ul></li><li><p>英语</p><ul><li>背单词三天打鱼两天晒网……</li><li>开口说英语（因为有菲律宾的同事来南京出差，待在我们组里。所以每天的 sync 被要求用英文，这下是没得选了，不得不说英文）</li><li>个人感觉自己的英语水平是有一点点提升的，再接再厉！</li></ul></li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>阅读<ul><li>《当我谈论跑步时，我在谈论什么》done</li><li>《中国历史十五讲》看到第八章</li></ul></li><li>篮球<ul><li>这个月只打了一次篮球，惭愧。</li></ul></li><li>锻炼<ul><li>开始尝试晚上下班后进行室内锻炼，虽然频次不多，一周两三次，似乎精神状态有提升，继续保持～</li></ul></li><li>电影<ul><li>《铃芽之旅》还可以，画面和音乐都挺不错的。个人感觉剧情方面有一些单薄。</li></ul></li><li>动漫<ul><li>花了一个周末的时间，补番《画江湖之不良人》，一步步看着画江湖的剧情越来越好。想着第一次看不良人的时候我还在上高中，真是时光荏苒。</li></ul></li></ul><h2 id="推荐播客"><a href="#推荐播客" class="headerlink" title="推荐播客"></a>推荐播客</h2><p><a href="https://podcasts.apple.com/cn/podcast/%E5%BC%80%E6%BA%90%E9%9D%A2%E5%AF%B9%E9%9D%A2/id1587487089?i=1000554056927">S01E07 面对开放的大门，技术小白可以怎样开始参与开源</a></p><p>下月见～</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>月报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【月报】2023-02-秦淮河畔</title>
    <link href="/2023/02/28/2023-02/"/>
    <url>/2023/02/28/2023-02/</url>
    
    <content type="html"><![CDATA[<h1 id="【月报】2023-02-秦淮河畔"><a href="#【月报】2023-02-秦淮河畔" class="headerlink" title="【月报】2023-02 秦淮河畔"></a>【月报】2023-02 秦淮河畔</h1><p><img src="/../img/WechatIMG46.jpeg" alt="秦淮河畔"></p><blockquote><p>从老门东走到夫子庙，会路过秦淮河畔，晚上的灯光很美，游船也很有意境。</p></blockquote><p>在南京度过的第一个二月，也是玩的最开心的二月，二月有太多的事情值得回忆了。</p><p>因为我在南京的缘故，一些朋友开始来南京游玩，一般会来我这边住宿。一来我租的房子有两个小房间，有一个客卧可以空出来，住宿不成问题，亦可省下一笔不小的酒店开销；二来自从离开学校之后，大家基本都是聚少离多，很多时候，只是依托于互联网来维系联系，可以线下见一面，聚一次，自然是不易错过的机会。</p><p>二月份共是招待了三波朋友。一是星哥和佳乐，二是小胖和谭总，三是霞姐和大衣。有高中的同学，亦有大学的室友，很多都已经算是多年的老友。老友见面自是不免追忆往昔，聊起以前的一些共同记忆，感慨时光飞逝，物是人非。人总是会变的，年龄上每日按部就班的增加，性格和见解上也会随工作，读研，感情，生活的经历而改变，或好或坏。好在有些东西是不会改变的，就像记忆，南京的相逢让我们的记忆得以重现、延续和补充。</p><p>因为陪同游玩的缘故，去了一些暂时还未涉足的南京景区。老门东、夫子庙、玄武湖、鸡鸣寺、秦淮河畔……南京展示了它作为金陵城的一面，给所有到访金陵的客人，让他们不得不感叹金陵的美好，折服于这个六朝古都的景色和文化底蕴之下。南京城如果是一位君子，我想那也必是温润如玉的一位。</p><p>我会怀念二月的相逢，会怀念2023年二月的南京城。</p><p>除去故人和金陵。二月里，工作依旧是生活的主旋律。</p><p>因为一月做 <a href="https://opentelemetry.io/">openTelemetry</a> 的 research 的缘故，我开始更多的接触和学习关于云原生下服务的可观测性。二月里，我开始尝试在 int 环境上搭建生产环境下 jaeger。在早先的 research 中，更多是学习里面的概念，借助 all in one 的 module 搭一个简单的可供测试的环境。当开始正式考虑后续的正式环境的实践的时候，需要更多的思考架构的设计，服务的安全性，服务的可用性，服务的稳定性，甚至服务的成本和收益。目前来说，自己搭建的 jaeger 很多需要改进和优化的点。线上服务的接入也还需要我去实践具体的 code，道阻且长，希望三月份可以把这个 feature 成功完成。</p><p>同时，因为更多的接触云原生的内容。我也越发觉得自己计算机基础、网络知识的匮乏。它们的重要性自是不必多说，虽然之前也会定时去翻阅一二，但始终不是很深入。所以二月份也给自己定下了一个恶补计算机基础和网络的计划。目前在执行中，我个人的期望是在上半年结束之后可以有较大的提高。</p><p>目前在看的几本书：</p><ul><li>《网络是咋样连接的》</li><li>《TCP-IP协议及其应用》</li><li>《深入浅出HTTPS》</li><li>《Linux 环境编程：从应用到内核》</li><li>《程序是怎么跑起来的》</li><li>《CSAPP》</li><li>《Linux内核设计的艺术》</li></ul><p>另一方面，因为被《万历十五年》勾起的对于历史的盎然兴趣在二月仍旧存有余温。二月份开始看《中国历史十五讲》，这本书主要是从十五个不同的维度来对中国的历史进行不同的阐述。目前已看了六章有余，三月份应该可以看完。想着即使不能读史以明智，了解些前朝逸闻趣事也是一种乐趣，挺好～</p><p>二月份的背单词计划进行的并不是顺利，我的单词计划安排在晚上下班后，但一般我下班，回家，吃饭，洗漱，一套生活琐事下来，时间也将近八点了。很多时候，我会选择躺在床上，看会书，然后背单词。但是总是感觉收效甚微，可能是待在放有厚被子的温床上，人会丧失斗志吧。三月份会每天背完单词后再躺平～</p><p>二月播客时间，推荐播客: <a href="https://podcasts.apple.com/cn/podcast/s3e5-vue-js%E4%BD%9C%E8%80%85%E5%B0%A4%E9%9B%A8%E6%BA%AA-%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E5%B0%B1%E6%98%AF%E4%B8%8D%E6%96%AD%E5%9C%B0%E8%88%8D%E5%8F%96/id1241589761?i=1000561879795">S3E5|Vue.js 作者尤雨溪: 框架设计就是不断地取舍</a></p><p>就写这么多了，三月见！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>月报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【月报】2023-01-新年伊始</title>
    <link href="/2023/01/31/2022-01/"/>
    <url>/2023/01/31/2022-01/</url>
    
    <content type="html"><![CDATA[<h1 id="【月报】2023-01-新年伊始"><a href="#【月报】2023-01-新年伊始" class="headerlink" title="【月报】2023-01 新年伊始"></a>【月报】2023-01 新年伊始</h1><blockquote><p>去年的时候，我开始经常看一些开源博客和推特。受 @<a href="https://ichn.xyz/blog">ichn-hu</a> 的影响，有不少人开始在互联网上公开自己的周报。我一直有想尝试的想法，一方面记录下生活，一方面也是对自己的督促。但我深知自己生活的寡淡和技术的浅薄，以周为期限对于我来说，似乎还是有些过于短暂了。所以我想着把周报进行时间维度的拉伸，于是有了这篇月报。</p><p>尝试公开写月报，尝试新的生活方式。</p></blockquote><p>工作上，新年的第一个月我开始为团队做 <a href="https://opentelemetry.io/">openTelemetry</a> 的 research。基于团队已有的项目，做了一次简单的 POC。基于opentelemetry官方提供的 go SDK，和我们已有的服务进行集成，采用OTLP Exporter，并最终使用 Jaeger 作为前端可视化的方案进行 trace 调用链路的展示。这也是目前业界内比较通用的方案。整个流程走下来，算是初窥门径。其他方面的工作内容，这里也不便多说，就此作罢。</p><p>生活上，一年一度的农历新年，让我拥有了长达八天的假期，一段清闲的时光。但是我今年却更深地体会到了年味的消失。除夕夜当天到家，没赶上祠堂祭拜。大年初一，零下三度的温度让我不舍起床，也就没去村里的庙里拜菩萨。原本大年初二是大家去外婆家拜年的日子，因为外婆的离世，大家也不约而同的丧失了这个默契。年味在消失吗？我看着路边那群手拿炮仗的小孩们，在窗外的延绵不绝的烟火和鞭炮声中，度过了农历新年。</p><p>也是因为过于清闲，我在过年的时候，开始翻弄起微信读书的书架。因为想多了解些历史，于是翻阅了《万历十五年》。《万历十五年》不算是传统的编年体历史书，黄仁宇先生对于历史考究却不同于一般正史里对历史人物事迹的编撰记录，他更侧重于对人物内心、时代政治环境、人民、经济、社会、封建治国之道、儒家文化的辩证和思考。每个章节似乎自成一体，像是一本人物纪传体小说。也是这本书，又让我激起了对于历史的兴趣，书架中众多的技术书中有了一些历史文学的点缀。</p><p>另外，因为一月份还听了很多的播客，这里推荐一集：<a href="https://podcasts.apple.com/cn/podcast/s3e1-pingcap-cto-%E9%BB%84%E4%B8%9C%E6%97%AD-%E6%8E%A2%E7%B4%A2%E5%BC%80%E6%BA%90%E5%88%9B%E4%B8%9A%E7%9A%84%E5%BA%95%E5%B1%82%E9%80%BB%E8%BE%91-%E4%BB%8Ebasic%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93tidb/id1241589761?i=1000561879687"><strong>S3E1 | PingCAP CTO 黄东旭 - 探索开源创业的底层逻辑, 从Basic到数据库TiDB</strong></a>。以后这个推荐播客就作为保留节目吧～</p><p>就写这么多了，二月见！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>月报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年终总结--平和的面对一切</title>
    <link href="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2022年终总结–平和的面对一切"><a href="#2022年终总结–平和的面对一切" class="headerlink" title="2022年终总结–平和的面对一切"></a>2022年终总结–平和的面对一切</h1><p>该怎么形容我的2022年呢？我想了很久，我没有确切的答案。</p><p>如果一定要用一个词来总结我2022年，我会选择平和，平和的面对的一切，不论是工作还是生活。</p><p>2022算是我正式进入职场的第一个完整年份。如果说2021年我尚且留着一半学生的稚气，那2022年，我已经是身锤百炼的打工人了。工作方面，尽管没有太多技术上的长进，但是对于工作的流程和进度的把控有了更进一步的认知和实践，我学会更好的安排时间来面对繁重的各项工作，也更加明白了职场中的处事原则。以前我觉得只要技术牛逼，到哪里都能发光发热(也确实有这样的人)，但现在我觉得能安安分分把工作完成交付的人才能发光发热，甚至安安分分把领导交付的任务优先完成才能发光发热。我开始觉得工作的本质就是产生商业价值，功能做的再花哨，技术实现多么高性能高可用，最终还是需要用户买单，用户不买单，所做的一切都是无用功的，这就是商业的价值。虽然道理谁都懂，但是当整个部门都在为上云，saas，商业化，盈利来自保的时候，那种感觉是如此的强烈。</p><p>另外一件值得一提的事就是离开腾讯了。</p><p>我是2021年7月份以校招生的身份加入腾讯的。在腾讯一年多的时间里，我学习到的知识，开阔的视野是我以前所不能及的。需求评审，技术方案，开发，UT, CR, CICD,  SLA保障，维护，我对整个开发的流程有了更为清楚的认知，平日里的技术分享和KM里面高质量的文章也是我日常吸取知识的源泉。在离开前的那一个月，每天看一些km里面自己收藏的文章，看看乐问，是一天里较为轻松愉悦的时刻。另外，在腾讯里也认识了很多优秀的人，校招生的封培，codeworld, 以及效能部门和大数据部门里的同事，我从他们身上学到了很多，也交了一些朋友。即使其中有些人和我一样，也都离开了腾讯，大家也偶尔都会在小群里联系。</p><p>我很感谢在腾讯里的经历，也希望腾讯能越来越好。</p><p>我在9月份来到了新的公司，这是完全不同于腾讯的公司文化。我不必每天九点多十点多下班，也不必在周末里加班加点来赶进度，不必每天打开电脑，面对那堆积如山的工单问题，也没有项目经理每天在我工位面前拉通对齐了。我有了更为宽松的工作环境，不再有那么大的工作压力。并且在新公司中，我扮演的角色也从执行者，慢慢开始自己own一些工作项，做一些新技术的research和实践。work life balance, 我想我满意了现在工作。</p><p>生活上，我开始尝试一些新的东西。</p><p>骑行，switch， 摄影，口琴，动漫，甚至在来到南京后，开始更多的出去走动，中山陵，美龄宫，鱼嘴公园，先锋书店，莫愁湖……新的生活是新鲜的，有种探索未知的愉悦。这里面我最喜欢的是骑行，当我骑行在南京的梧桐树下，当骑行的风声在我耳边轻微响起的时候，我感到无比的愉悦，新年的第一骑会选择去骑老山或者黄龙枧吧，神往已久。</p><p>会有遗憾吗？</p><p>今年最大的遗憾是外婆永远的离开了。虽然在外婆病重的时候，我提前请假回家看望了外婆，但那个时候，外婆已是完全不能自理，在神志上也只是稍有片刻才能认出我是谁，每天进食困难，在我用调羹的喂食下勉强能喝下几口粥。虽然不愿意承认，但那时候已是感觉外婆时日无多。在我返回南京一周后，外婆永久的离开了人世。我从一岁开始，就是外婆在抚养我长大，而我却不能在她年事已高病魔缠身的时候在其身边照顾。有无奈，更是愧疚。希望外婆在世界的另外一边，不必再与病魔斗争，万事顺意。我会想念你。</p><p>2023年呢？有什么规划吗？想去做什么？我不知道。</p><p>但是我想，我会更为正确的浪费剩下的时间。</p><p>就写这么多了，明年见！</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/04/hello-world/"/>
    <url>/2021/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hello World</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
